"""End-to-end integration tests for forum agent system.

This module tests the complete system integration including:
- Discord bot event processing
- Database operations
- AI evaluation
- Admin interface
- Real-time event handling

These tests simulate actual Discord events and verify the entire pipeline.
"""

from __future__ import annotations

import pytest
import asyncio
from unittest.mock import AsyncMock, Mock, patch
from uuid import uuid4
from datetime import datetime, timezone

from smarter_dev.web.models import ForumAgent, ForumAgentResponse


class TestForumAgentEndToEnd:
    """End-to-end tests for forum agent system."""
    
    @pytest.mark.asyncio
    async def test_discord_forum_post_to_database_pipeline(self, real_db_session):
        """Test complete pipeline from Discord event to database storage."""
        guild_id = "123456789012345678"
        
        # Setup: Create forum agent in database
        agent = ForumAgent(
            guild_id=guild_id,
            name="E2E Test Agent",
            system_prompt="You are a helpful assistant that responds to all questions with helpful advice.",
            monitored_forums=["forum_123", "forum_456"],
            response_threshold=0.6,
            max_responses_per_hour=10,
            is_active=True
        )
        real_db_session.add(agent)
        await real_db_session.commit()
        await real_db_session.refresh(agent)
        
        # Step 1: Simulate Discord forum thread creation event
        from smarter_dev.bot.client import create_bot, setup_bot_services
        from smarter_dev.shared.config import get_settings
        
        settings = get_settings()
        bot = create_bot(settings)
        
        # Mock the bot setup to avoid external dependencies
        with patch('smarter_dev.bot.client.APIClient'), \
             patch('smarter_dev.bot.services.forum_agent_service.ForumAgentService') as mock_service_class:
            
            # Create mock forum agent service
            mock_service = AsyncMock()
            mock_service_class.return_value = mock_service
            mock_service.initialize = AsyncMock()
            mock_service.health_check = AsyncMock(return_value=Mock(status="healthy"))
            
            # Mock the API client
            mock_api_client = AsyncMock()
            
            # Set up bot services manually
            bot.d = {
                'api_client': mock_api_client,
                'forum_agent_service': mock_service,
                '_services': {
                    'forum_agent_service': mock_service
                }
            }
            
            # Mock the process_forum_post method to simulate AI evaluation
            mock_service.process_forum_post.return_value = [{
                'agent_id': str(agent.id),
                'agent_name': agent.name,
                'should_respond': True,
                'response_content': 'This is a helpful response generated by the AI agent.',
                'confidence': 0.85,
                'decision_reason': 'The post contains a clear question that matches my expertise.',
                'tokens_used': 250
            }]
            
            # Create mock Discord objects
            mock_thread = Mock()
            mock_thread.id = 987654321
            mock_thread.name = "How do I get started with programming?"
            mock_thread.parent_id = 123456789  # forum_123
            
            # Mock applied tags
            mock_tag1 = Mock()
            mock_tag1.name = "programming"
            mock_tag2 = Mock() 
            mock_tag2.name = "beginner"
            mock_thread.applied_tags = [mock_tag1, mock_tag2]
            
            mock_message = Mock()
            mock_message.content = "I'm new to programming and want to learn. Where should I start?"
            mock_message.author = Mock()
            mock_message.author.display_name = "NewCoder"
            mock_message.attachments = []
            
            mock_event = Mock()
            mock_event.guild_id = int(guild_id)
            mock_event.thread = mock_thread
            mock_event.is_forum_thread = True
            
            # Mock Discord REST API for posting responses
            bot.rest = AsyncMock()
            
            # Step 2: Process the Discord event
            from smarter_dev.bot.client import handle_forum_thread_create
            
            await handle_forum_thread_create(bot, mock_event)
            
            # Step 3: Verify the event was processed
            mock_service.process_forum_post.assert_called_once()
            
            # Get the call arguments to verify correct data was passed
            call_args = mock_service.process_forum_post.call_args
            assert call_args[0][0] == guild_id  # guild_id
            
            post_data = call_args[0][1]  # post object
            assert post_data.title == "How do I get started with programming?"
            assert post_data.content == "I'm new to programming and want to learn. Where should I start?"
            assert post_data.author_display_name == "NewCoder"
            assert "programming" in post_data.tags
            assert "beginner" in post_data.tags
            assert post_data.channel_id == str(mock_thread.parent_id)
            assert post_data.thread_id == str(mock_thread.id)
            
            # Step 4: Verify response was posted to Discord
            bot.rest.create_message.assert_called_once()
            
            # Check the response message
            message_call = bot.rest.create_message.call_args
            assert message_call[0][0] == mock_thread.id  # Posted to correct thread
            
            message_content = message_call[1]['content']
            assert agent.name in message_content
            assert "helpful response generated" in message_content
            assert "confidence: 0.85" in message_content

    @pytest.mark.asyncio 
    async def test_multiple_agents_concurrent_processing(self, real_db_session):
        """Test multiple agents processing the same post concurrently."""
        guild_id = "123456789012345678"
        
        # Create multiple agents with different specialties
        agents = []
        agent_configs = [
            {
                "name": "Python Specialist",
                "system_prompt": "You are a Python programming expert.",
                "threshold": 0.8
            },
            {
                "name": "Web Development Helper", 
                "system_prompt": "You help with web development questions.",
                "threshold": 0.7
            },
            {
                "name": "General Programming Assistant",
                "system_prompt": "You assist with general programming questions.",
                "threshold": 0.5
            }
        ]
        
        for config in agent_configs:
            agent = ForumAgent(
                guild_id=guild_id,
                name=config["name"],
                system_prompt=config["system_prompt"],
                monitored_forums=["programming_forum"],
                response_threshold=config["threshold"],
                max_responses_per_hour=10,
                is_active=True
            )
            real_db_session.add(agent)
            agents.append(agent)
        
        await real_db_session.commit()
        
        # Mock the forum agent service to simulate real processing
        from smarter_dev.bot.services.forum_agent_service import ForumAgentService
        from smarter_dev.bot.services.api_client import APIClient
        from smarter_dev.shared.config import get_settings
        
        settings = get_settings()
        
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get, \
             patch.object(APIClient, 'post') as mock_post:
            
            # Mock API responses for agent loading
            mock_get.return_value = [
                {
                    "id": str(agents[0].id),
                    "guild_id": guild_id,
                    "name": "Python Specialist",
                    "system_prompt": "You are a Python programming expert.",
                    "monitored_forums": ["programming_forum"],
                    "response_threshold": 0.8,
                    "max_responses_per_hour": 10,
                    "is_active": True
                },
                {
                    "id": str(agents[1].id), 
                    "guild_id": guild_id,
                    "name": "Web Development Helper",
                    "system_prompt": "You help with web development questions.",
                    "monitored_forums": ["programming_forum"],
                    "response_threshold": 0.7,
                    "max_responses_per_hour": 10,
                    "is_active": True
                },
                {
                    "id": str(agents[2].id),
                    "guild_id": guild_id,
                    "name": "General Programming Assistant", 
                    "system_prompt": "You assist with general programming questions.",
                    "monitored_forums": ["programming_forum"],
                    "response_threshold": 0.5,
                    "max_responses_per_hour": 10,
                    "is_active": True
                }
            ]
            
            # Mock rate limit checks
            mock_post.return_value = {"id": str(uuid4())}
            
            # Mock rate limit API calls
            def mock_get_side_effect(url, **kwargs):
                if "count" in url:
                    return {"count": 0}  # No recent responses
                return mock_get.return_value
            
            mock_get.side_effect = mock_get_side_effect
            
            service = ForumAgentService(APIClient("http://test", "test"), None)
            
            # Mock AI evaluation with different responses per agent
            def mock_ai_evaluation(system_prompt, *args, **kwargs):
                if "Python" in system_prompt:
                    return ("This is a Python question", 0.9, "Use Python lists like this...", 200)
                elif "Web development" in system_prompt:
                    return ("This relates to web development", 0.75, "For web development, consider...", 180)
                else:
                    return ("General programming advice", 0.6, "Programming best practices include...", 150)
            
            from smarter_dev.bot.client import ForumPostData
            
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                mock_evaluate.side_effect = mock_ai_evaluation
                
                # Create test post
                post_data = ForumPostData(
                    title="Best practices for Python web development?",
                    content="I'm building a web app with Python. What are the best practices?",
                    author_display_name="WebDev123",
                    tags=["python", "web", "best-practices"],
                    attachments=[],
                    channel_id="programming_forum",
                    thread_id="thread_12345",
                    guild_id=guild_id
                )
                
                # Process the post
                responses = await service.process_forum_post(guild_id, post_data)
        
        # Verify all agents processed the post
        assert len(responses) == 3
        
        # Verify agent-specific responses
        python_response = next(r for r in responses if "Python Specialist" in r["agent_name"])
        web_response = next(r for r in responses if "Web Development" in r["agent_name"]) 
        general_response = next(r for r in responses if "General Programming" in r["agent_name"])
        
        # All should respond (confidence above thresholds)
        assert python_response["should_respond"] is True
        assert web_response["should_respond"] is True
        assert general_response["should_respond"] is True
        
        # Verify different confidence levels
        assert python_response["confidence"] == 0.9
        assert web_response["confidence"] == 0.75
        assert general_response["confidence"] == 0.6
        
        # Verify different responses
        assert "Python lists" in python_response["response_content"]
        assert "web development" in web_response["response_content"]
        assert "best practices" in general_response["response_content"]

    @pytest.mark.asyncio
    async def test_agent_lifecycle_with_real_events(self, real_db_session):
        """Test complete agent lifecycle with real Discord-like events."""
        guild_id = "123456789012345678"
        
        # Phase 1: Agent Creation and Activation
        agent = ForumAgent(
            guild_id=guild_id,
            name="Lifecycle Test Agent",
            system_prompt="I help with testing and quality assurance questions.",
            monitored_forums=["testing_forum", "qa_forum"],
            response_threshold=0.7,
            max_responses_per_hour=3,
            is_active=True
        )
        real_db_session.add(agent)
        await real_db_session.commit()
        await real_db_session.refresh(agent)
        
        # Phase 2: Normal Operation - Process Posts
        from smarter_dev.bot.services.forum_agent_service import ForumAgentService
        from smarter_dev.bot.services.api_client import APIClient
        from smarter_dev.bot.client import ForumPostData
        
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get, \
             patch.object(APIClient, 'post') as mock_post:
            
            # Mock API responses
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": agent.system_prompt,
                "monitored_forums": agent.monitored_forums,
                "response_threshold": agent.response_threshold,
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": agent.is_active
            }]
            
            # Track rate limiting
            response_count = 0
            def mock_get_side_effect(url, **kwargs):
                if "count" in url:
                    return {"count": response_count}
                return mock_get.return_value
            
            def mock_post_side_effect(*args, **kwargs):
                nonlocal response_count
                response_count += 1
                return {"id": str(uuid4())}
            
            mock_get.side_effect = mock_get_side_effect
            mock_post.side_effect = mock_post_side_effect
            
            service = ForumAgentService(APIClient("http://test", "test"), None)
            
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                mock_evaluate.return_value = ("Testing question detected", 0.85, "For testing, I recommend...", 200)
                
                # Process first post - should succeed
                post_1 = ForumPostData(
                    title="How to write unit tests?",
                    content="I need help writing effective unit tests for my code.",
                    author_display_name="TestWriter",
                    tags=["testing", "unit-tests"],
                    attachments=[],
                    channel_id="testing_forum",
                    thread_id="thread_001",
                    guild_id=guild_id
                )
                
                responses_1 = await service.process_forum_post(guild_id, post_1)
                assert len(responses_1) == 1
                assert responses_1[0]["should_respond"] is True
                
                # Process second post - should succeed  
                post_2 = ForumPostData(
                    title="Integration testing strategies?",
                    content="What are the best strategies for integration testing?",
                    author_display_name="QAEngineer",
                    tags=["testing", "integration"],
                    attachments=[],
                    channel_id="qa_forum",
                    thread_id="thread_002",
                    guild_id=guild_id
                )
                
                responses_2 = await service.process_forum_post(guild_id, post_2)
                assert len(responses_2) == 1
                assert responses_2[0]["should_respond"] is True
                
                # Process third post - should succeed (at rate limit)
                post_3 = ForumPostData(
                    title="Test automation frameworks?",
                    content="Which test automation frameworks are recommended?",
                    author_display_name="AutomationTester",
                    tags=["testing", "automation"],
                    attachments=[],
                    channel_id="testing_forum", 
                    thread_id="thread_003",
                    guild_id=guild_id
                )
                
                responses_3 = await service.process_forum_post(guild_id, post_3)
                assert len(responses_3) == 1
                assert responses_3[0]["should_respond"] is True
                
                # Process fourth post - should be rate limited
                post_4 = ForumPostData(
                    title="Load testing tools?",
                    content="What tools are good for load testing?",
                    author_display_name="LoadTester",
                    tags=["testing", "performance"],
                    attachments=[],
                    channel_id="testing_forum",
                    thread_id="thread_004", 
                    guild_id=guild_id
                )
                
                responses_4 = await service.process_forum_post(guild_id, post_4)
                assert len(responses_4) == 1
                assert responses_4[0]["should_respond"] is False
                assert "rate limit" in responses_4[0]["decision_reason"].lower()
        
        # Phase 3: Agent Deactivation
        agent.is_active = False
        await real_db_session.commit()
        
        # Phase 4: Verify Inactive Agent Doesn't Respond
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get:
            
            # Mock API to return inactive agent
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": agent.system_prompt,
                "monitored_forums": agent.monitored_forums,
                "response_threshold": agent.response_threshold,
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": False
            }]
            
            service_inactive = ForumAgentService(APIClient("http://test", "test"), None)
            
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                mock_evaluate.return_value = ("Would respond", 0.9, "Test response", 100)
                
                post_inactive = ForumPostData(
                    title="Should be ignored",
                    content="This post should be ignored by inactive agent",
                    author_display_name="IgnoredUser",
                    tags=["testing"],
                    attachments=[],
                    channel_id="testing_forum",
                    thread_id="thread_ignored",
                    guild_id=guild_id
                )
                
                responses_inactive = await service_inactive.process_forum_post(guild_id, post_inactive)
                
                # Should return empty list or no active responses
                active_responses = [r for r in responses_inactive if r.get("should_respond", False)]
                assert len(active_responses) == 0

    @pytest.mark.asyncio
    async def test_error_resilience_and_recovery(self, real_db_session):
        """Test system resilience to various error conditions."""
        guild_id = "123456789012345678"
        
        # Create test agent
        agent = ForumAgent(
            guild_id=guild_id,
            name="Error Resilience Agent",
            system_prompt="I help with error handling and resilience testing.",
            monitored_forums=["error_forum"],
            response_threshold=0.6,
            max_responses_per_hour=10,
            is_active=True
        )
        real_db_session.add(agent)
        await real_db_session.commit()
        
        from smarter_dev.bot.services.forum_agent_service import ForumAgentService
        from smarter_dev.bot.services.api_client import APIClient
        from smarter_dev.bot.client import ForumPostData
        
        # Test 1: Database Connection Error Recovery
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get:
            
            # First call fails, second succeeds
            mock_get.side_effect = [
                Exception("Database connection timeout"),
                [{
                    "id": str(agent.id),
                    "guild_id": guild_id,
                    "name": agent.name,
                    "system_prompt": agent.system_prompt,
                    "monitored_forums": agent.monitored_forums,
                    "response_threshold": agent.response_threshold,
                    "max_responses_per_hour": agent.max_responses_per_hour,
                    "is_active": agent.is_active
                }]
            ]
            
            service = ForumAgentService(APIClient("http://test", "test"), None)
            
            # First attempt should handle error gracefully
            try:
                post_data = ForumPostData(
                    title="Error test post",
                    content="Testing error handling",
                    author_display_name="ErrorTester",
                    tags=["error"],
                    attachments=[],
                    channel_id="error_forum",
                    thread_id="thread_error",
                    guild_id=guild_id
                )
                
                responses = await service.process_forum_post(guild_id, post_data)
                # Should handle error and return empty or error response
                assert isinstance(responses, list)
            except Exception as e:
                # Should be a wrapped ServiceError, not the original database error
                assert "Database connection timeout" not in str(e)
        
        # Test 2: AI Service Error Recovery
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get, \
             patch.object(APIClient, 'post') as mock_post:
            
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": agent.system_prompt,
                "monitored_forums": agent.monitored_forums,
                "response_threshold": agent.response_threshold,
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": agent.is_active
            }]
            
            # Mock rate limit check
            def mock_get_side_effect(url, **kwargs):
                if "count" in url:
                    return {"count": 0}
                return mock_get.return_value
            
            mock_get.side_effect = mock_get_side_effect
            mock_post.return_value = {"id": str(uuid4())}
            
            service = ForumAgentService(APIClient("http://test", "test"), None)
            
            # AI evaluation fails first, then succeeds
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                call_count = 0
                
                def evaluate_side_effect(*args, **kwargs):
                    nonlocal call_count
                    call_count += 1
                    if call_count == 1:
                        raise Exception("AI service unavailable")
                    else:
                        return ("Recovery successful", 0.8, "System is working again", 150)
                
                mock_evaluate.side_effect = evaluate_side_effect
                
                # First post - AI fails, should handle gracefully
                try:
                    responses_1 = await service.process_forum_post(guild_id, post_data)
                    # Should handle error without crashing
                    assert isinstance(responses_1, list)
                except Exception as e:
                    # Should be ServiceError, not the AI service error
                    assert "AI service unavailable" not in str(e)
                
                # Second post - AI recovers, should work normally
                responses_2 = await service.process_forum_post(guild_id, post_data)
                
                # Should work normally after recovery
                assert len(responses_2) == 1
                if responses_2[0].get("should_respond"):
                    assert responses_2[0]["response_content"] == "System is working again"

    @pytest.mark.asyncio
    async def test_real_time_configuration_updates(self, real_db_session):
        """Test that configuration changes take effect in real-time."""
        guild_id = "123456789012345678"
        
        # Create initial agent
        agent = ForumAgent(
            guild_id=guild_id,
            name="Config Update Agent",
            system_prompt="Initial system prompt for testing",
            monitored_forums=["config_forum"],
            response_threshold=0.8,  # High threshold initially
            max_responses_per_hour=5,
            is_active=True
        )
        real_db_session.add(agent)
        await real_db_session.commit()
        await real_db_session.refresh(agent)
        
        from smarter_dev.bot.services.forum_agent_service import ForumAgentService
        from smarter_dev.bot.services.api_client import APIClient
        from smarter_dev.bot.client import ForumPostData
        
        # Phase 1: Test with initial configuration
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get, \
             patch.object(APIClient, 'post') as mock_post:
            
            # Mock initial config
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": agent.system_prompt,
                "monitored_forums": agent.monitored_forums,
                "response_threshold": 0.8,  # High threshold
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": agent.is_active
            }]
            
            # Mock rate limit and response recording
            def mock_get_side_effect(url, **kwargs):
                if "count" in url:
                    return {"count": 0}
                return mock_get.return_value
            
            mock_get.side_effect = mock_get_side_effect
            mock_post.return_value = {"id": str(uuid4())}
            
            service = ForumAgentService(APIClient("http://test", "test"), None)
            
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                # AI returns medium confidence
                mock_evaluate.return_value = ("Medium confidence response", 0.75, "Medium response", 100)
                
                post_data = ForumPostData(
                    title="Config test post",
                    content="Testing configuration updates",
                    author_display_name="ConfigTester",
                    tags=["config"],
                    attachments=[],
                    channel_id="config_forum",
                    thread_id="thread_config",
                    guild_id=guild_id
                )
                
                responses_1 = await service.process_forum_post(guild_id, post_data)
                
                # Should not respond (0.75 < 0.8 threshold)
                assert len(responses_1) == 1
                assert responses_1[0]["should_respond"] is False
        
        # Phase 2: Update configuration (lower threshold)
        agent.response_threshold = 0.6  # Lower threshold
        agent.system_prompt = "Updated system prompt for testing"
        await real_db_session.commit()
        
        # Phase 3: Test with updated configuration
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get, \
             patch.object(APIClient, 'post') as mock_post:
            
            # Mock updated config  
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": "Updated system prompt for testing",  # Updated
                "monitored_forums": agent.monitored_forums,
                "response_threshold": 0.6,  # Lower threshold
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": agent.is_active
            }]
            
            mock_get.side_effect = mock_get_side_effect
            mock_post.return_value = {"id": str(uuid4())}
            
            service_updated = ForumAgentService(APIClient("http://test", "test"), None)
            
            with patch('smarter_dev.bot.agent.ForumMonitorAgent.evaluate_post') as mock_evaluate:
                # Same AI confidence as before
                mock_evaluate.return_value = ("Medium confidence response", 0.75, "Medium response", 100)
                
                responses_2 = await service_updated.process_forum_post(guild_id, post_data)
                
                # Should now respond (0.75 >= 0.6 threshold)
                assert len(responses_2) == 1
                assert responses_2[0]["should_respond"] is True
                assert responses_2[0]["confidence"] == 0.75
        
        # Phase 4: Test monitored forums update
        agent.monitored_forums = ["different_forum"]  # Change monitored forums
        await real_db_session.commit()
        
        with patch.object(APIClient, '__init__', return_value=None), \
             patch.object(APIClient, 'get') as mock_get:
            
            # Mock updated monitored forums
            mock_get.return_value = [{
                "id": str(agent.id),
                "guild_id": guild_id,
                "name": agent.name,
                "system_prompt": agent.system_prompt,
                "monitored_forums": ["different_forum"],  # Updated
                "response_threshold": 0.6,
                "max_responses_per_hour": agent.max_responses_per_hour,
                "is_active": agent.is_active
            }]
            
            service_final = ForumAgentService(APIClient("http://test", "test"), None)
            
            # Post to original forum - should be ignored
            responses_3 = await service_final.process_forum_post(guild_id, post_data)
            
            # Should not process post from unmonitored forum
            assert len(responses_3) == 0 or not any(r.get("should_respond", False) for r in responses_3)