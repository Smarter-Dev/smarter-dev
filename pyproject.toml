[project]
name = "smarter-dev"
version = "0.1.0"
description = "Discord bot with bytes economy and squads system, plus web API and admin interface"
requires-python = ">=3.11"
authors = [
    {name = "Smarter Dev Team"}
]
keywords = ["discord", "bot", "web", "api", "economy", "squads"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Web framework
    "starlette>=0.47.1",
    "uvicorn[standard]>=0.35.0",
    "jinja2>=3.1.6",
    "markdown>=3.4.0",
    # Core shared dependencies
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "opencv-python>=4.12.0.88",
    "cairosvg>=2.8.2",
    "pillow>=11.3.0",
    "numpy>=2.2.6",
    "scipy>=1.16.0",
    "matplotlib>=3.10.3",
    "itsdangerous>=2.2.0",
    "python-multipart>=0.0.20",
    "hikari-lightbulb<3.0.0",
    "blend-modes>=2.2.0",
    "alembic>=1.16.4",
    "asyncpg>=0.30.0",
    "greenlet>=3.2.3",
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "redis>=6.2.0",
    "dspy-ai>=3.0.0",
]

[dependency-groups]
# Discord bot dependencies
bot = [
    "hikari[speedups]>=2.0.0",
    "hikari-lightbulb>=2.0.0",
    "aiohttp>=3.8.0",
    "httpx>=0.24.0", # For API client to communicate with web service
    "dspy>=2.6.27",
]

# Web API dependencies
web = [
    "fastapi>=0.104.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.28.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "httpx>=0.24.0",
    "authlib>=1.2.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "mypy>=1.5.0",
    "ruff>=0.0.290",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "aiosqlite>=0.21.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "aiosqlite>=0.21.0",
    "psutil>=5.9.0",  # For performance testing
]

# GIF creation (existing)
gif-creation = [
    "pillow>=11.3.0",
]

# Video/movie generation
movie = [
    "moviepy>=1.0.3",
    "imageio>=2.9.0",
    "imageio-ffmpeg>=0.4.0",
]

# Interactive reveal
interactive = [
    "pygame>=2.5.0",
    "pytz>=2023.3",
    "opencv-python>=4.8.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=smarter_dev",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=20",  # Temporarily reduced while fixing tests
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that use LLM APIs (expensive, skip by default with '-m \"not llm\"')",
]

[tool.coverage.run]
source = ["smarter_dev"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "hikari.*",
    "lightbulb.*",
    "redis.*",
    "asyncpg.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B018", "B019"]

[tool.ruff.isort]
known-first-party = ["smarter_dev"]
force-single-line = true

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["smarter_dev"]
force_single_line = true

[project.scripts]
# Development scripts
smarter-dev-bot = "smarter_dev.bot.client:run_bot"
smarter-dev-web = "smarter_dev.web.main:run_web"

[tool.hatch.build.targets.wheel]
packages = ["smarter_dev"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
