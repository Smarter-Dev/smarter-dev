"""add_squad_sale_events_table_for_timed_discount_events

Revision ID: 25b2c8176349
Revises: 225a72518719
Create Date: 2025-08-16 08:36:35.544045

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '25b2c8176349'
down_revision = '225a72518719'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('squad_sale_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('guild_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('duration_hours', sa.Integer(), nullable=False),
    sa.Column('join_discount_percent', sa.Integer(), nullable=False),
    sa.Column('switch_discount_percent', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('duration_hours >= 1', name=op.f('ck_squad_sale_events_ck_squad_sale_events_duration_positive')),
    sa.CheckConstraint('join_discount_percent >= 0 AND join_discount_percent <= 100', name=op.f('ck_squad_sale_events_ck_squad_sale_events_join_discount_range')),
    sa.CheckConstraint('switch_discount_percent >= 0 AND switch_discount_percent <= 100', name=op.f('ck_squad_sale_events_ck_squad_sale_events_switch_discount_range')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_squad_sale_events')),
    sa.UniqueConstraint('guild_id', 'name', name='uq_squad_sale_events_guild_name')
    )
    with op.batch_alter_table('squad_sale_events', schema=None) as batch_op:
        batch_op.create_index('ix_squad_sale_events_created_by', ['created_by'], unique=False)
        batch_op.create_index('ix_squad_sale_events_guild_active', ['guild_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_squad_sale_events_guild_id'), ['guild_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_squad_sale_events_is_active'), ['is_active'], unique=False)
        batch_op.create_index('ix_squad_sale_events_start_time', ['start_time'], unique=False)

    with op.batch_alter_table('generated_input_cache', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_generated_input_cache_challenge_id'))
        batch_op.drop_index(batch_op.f('ix_generated_input_cache_challenge_participant'))
        batch_op.drop_index(batch_op.f('ix_generated_input_cache_is_valid'))
        batch_op.drop_index(batch_op.f('ix_generated_input_cache_participant'))
        batch_op.drop_index(batch_op.f('ix_generated_input_cache_validity'))

    op.drop_table('generated_input_cache')
    with op.batch_alter_table('submission_rate_limits', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_submission_rate_limits_participant'))
        batch_op.drop_index(batch_op.f('ix_submission_rate_limits_participant_id'))
        batch_op.drop_index(batch_op.f('ix_submission_rate_limits_participant_timestamp'))
        batch_op.drop_index(batch_op.f('ix_submission_rate_limits_submission_timestamp'))
        batch_op.drop_index(batch_op.f('ix_submission_rate_limits_timestamp'))

    op.drop_table('submission_rate_limits')
    with op.batch_alter_table('campaigns', schema=None) as batch_op:
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('release_cadence_hours',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=False)
        batch_op.alter_column('announcement_channels',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               nullable=False)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('created_by',
               existing_type=sa.VARCHAR(),
               nullable=False)
        batch_op.drop_index(batch_op.f('ix_campaigns_start_date'))
        batch_op.create_index('ix_campaigns_created_by', ['created_by'], unique=False)
        batch_op.create_index('ix_campaigns_guild_active', ['guild_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_campaigns_is_active'), ['is_active'], unique=False)
        batch_op.create_index('ix_campaigns_start_time', ['start_time'], unique=False)
        batch_op.create_unique_constraint('uq_campaigns_guild_title', ['guild_id', 'title'])

    with op.batch_alter_table('challenge_inputs', schema=None) as batch_op:
        batch_op.create_index('ix_challenge_inputs_created_at', ['created_at'], unique=False)

    with op.batch_alter_table('challenge_submissions', schema=None) as batch_op:
        batch_op.alter_column('squad_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('submitted_solution',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('is_first_success',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=False)
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_challenge_participant'))
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_correct'))
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_participant'))
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_submission_timestamp'))
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_timestamp'))
        batch_op.create_index('ix_challenge_submissions_challenge_squad', ['challenge_id', 'squad_id'], unique=False)
        batch_op.create_index('ix_challenge_submissions_first_success', ['is_first_success', 'submitted_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenge_submissions_user_id'), ['user_id'], unique=False)
        batch_op.create_index('ix_challenge_submissions_user_submitted', ['user_id', 'submitted_at'], unique=False)
        batch_op.drop_column('submitted_result')
        batch_op.drop_column('submission_timestamp')
        batch_op.drop_column('participant_id')
        batch_op.drop_column('points_awarded')
        batch_op.drop_column('participant_type')

    with op.batch_alter_table('challenges', schema=None) as batch_op:
        batch_op.alter_column('points_value',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('is_released',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('is_announced',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.drop_index(batch_op.f('ix_challenges_campaign_order'))
        batch_op.drop_index(batch_op.f('ix_challenges_campaign_released'))
        batch_op.drop_index(batch_op.f('ix_challenges_script_updated'))
        batch_op.drop_constraint(batch_op.f('uq_challenges_campaign_order'), type_='unique')
        batch_op.create_index('ix_challenges_announced_at', ['announced_at'], unique=False)
        batch_op.create_index('ix_challenges_campaign_position', ['campaign_id', 'order_position'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenges_is_announced'), ['is_announced'], unique=False)
        batch_op.create_index('ix_challenges_is_released', ['is_released'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenges_order_position'), ['order_position'], unique=False)
        batch_op.create_unique_constraint('uq_challenges_campaign_position', ['campaign_id', 'order_position'])
        batch_op.drop_column('script_updated_at')
        batch_op.drop_column('difficulty_level')
        batch_op.drop_column('generation_script')
        batch_op.drop_column('categories')

    with op.batch_alter_table('scheduled_messages', schema=None) as batch_op:
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('is_sent',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.create_index('ix_scheduled_messages_campaign_time', ['campaign_id', 'scheduled_time'], unique=False)
        batch_op.create_index('ix_scheduled_messages_sent_at', ['sent_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('scheduled_messages', schema=None) as batch_op:
        batch_op.drop_index('ix_scheduled_messages_sent_at')
        batch_op.drop_index('ix_scheduled_messages_campaign_time')
        batch_op.alter_column('is_sent',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('challenges', schema=None) as batch_op:
        batch_op.add_column(sa.Column('categories', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('generation_script', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('difficulty_level', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('script_updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.drop_constraint('uq_challenges_campaign_position', type_='unique')
        batch_op.drop_index(batch_op.f('ix_challenges_order_position'))
        batch_op.drop_index('ix_challenges_is_released')
        batch_op.drop_index(batch_op.f('ix_challenges_is_announced'))
        batch_op.drop_index('ix_challenges_campaign_position')
        batch_op.drop_index('ix_challenges_announced_at')
        batch_op.create_unique_constraint(batch_op.f('uq_challenges_campaign_order'), ['campaign_id', 'order_position'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('ix_challenges_script_updated'), ['script_updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenges_campaign_released'), ['campaign_id', 'released_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenges_campaign_order'), ['campaign_id', 'order_position'], unique=False)
        batch_op.alter_column('is_announced',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('is_released',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('points_value',
               existing_type=sa.INTEGER(),
               server_default=sa.text('100'),
               existing_nullable=False)

    with op.batch_alter_table('challenge_submissions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('participant_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('points_awarded', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('participant_id', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('submission_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('submitted_result', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_index('ix_challenge_submissions_user_submitted')
        batch_op.drop_index(batch_op.f('ix_challenge_submissions_user_id'))
        batch_op.drop_index('ix_challenge_submissions_first_success')
        batch_op.drop_index('ix_challenge_submissions_challenge_squad')
        batch_op.create_index(batch_op.f('ix_challenge_submissions_timestamp'), ['submission_timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenge_submissions_submission_timestamp'), ['submission_timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenge_submissions_participant'), ['participant_id', 'participant_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenge_submissions_correct'), ['is_correct'], unique=False)
        batch_op.create_index(batch_op.f('ix_challenge_submissions_challenge_participant'), ['challenge_id', 'participant_id', 'participant_type'], unique=False)
        batch_op.alter_column('is_first_success',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               nullable=True)
        batch_op.alter_column('submitted_solution',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('squad_id',
               existing_type=sa.UUID(),
               nullable=True)

    with op.batch_alter_table('challenge_inputs', schema=None) as batch_op:
        batch_op.drop_index('ix_challenge_inputs_created_at')

    with op.batch_alter_table('campaigns', schema=None) as batch_op:
        batch_op.drop_constraint('uq_campaigns_guild_title', type_='unique')
        batch_op.drop_index('ix_campaigns_start_time')
        batch_op.drop_index(batch_op.f('ix_campaigns_is_active'))
        batch_op.drop_index('ix_campaigns_guild_active')
        batch_op.drop_index('ix_campaigns_created_by')
        batch_op.create_index(batch_op.f('ix_campaigns_start_date'), ['start_time'], unique=False)
        batch_op.alter_column('created_by',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
        batch_op.alter_column('announcement_channels',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               nullable=True)
        batch_op.alter_column('release_cadence_hours',
               existing_type=sa.INTEGER(),
               server_default=sa.text('24'),
               nullable=True)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(),
               nullable=True)

    op.create_table('submission_rate_limits',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('participant_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('submission_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("participant_type::text = ANY (ARRAY['player'::character varying, 'squad'::character varying]::text[])", name=op.f('ck_submission_rate_limits_ck_submission_rate_limits_par_2787')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_submission_rate_limits'))
    )
    with op.batch_alter_table('submission_rate_limits', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_submission_rate_limits_timestamp'), ['submission_timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_submission_rate_limits_submission_timestamp'), ['submission_timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_submission_rate_limits_participant_timestamp'), ['participant_id', 'participant_type', 'submission_timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_submission_rate_limits_participant_id'), ['participant_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_submission_rate_limits_participant'), ['participant_id', 'participant_type'], unique=False)

    op.create_table('generated_input_cache',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('challenge_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('participant_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('input_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('expected_result', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_valid', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('generation_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('first_request_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("participant_type::text = ANY (ARRAY['player'::character varying, 'squad'::character varying]::text[])", name=op.f('ck_generated_input_cache_ck_generated_input_cache_parti_e54e')),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenges.id'], name=op.f('fk_generated_input_cache_challenge_id_challenges'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_generated_input_cache')),
    sa.UniqueConstraint('challenge_id', 'participant_id', 'participant_type', name=op.f('uq_generated_input_cache_challenge_participant'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('generated_input_cache', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_generated_input_cache_validity'), ['is_valid'], unique=False)
        batch_op.create_index(batch_op.f('ix_generated_input_cache_participant'), ['participant_id', 'participant_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_generated_input_cache_is_valid'), ['is_valid'], unique=False)
        batch_op.create_index(batch_op.f('ix_generated_input_cache_challenge_participant'), ['challenge_id', 'participant_id', 'participant_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_generated_input_cache_challenge_id'), ['challenge_id'], unique=False)

    with op.batch_alter_table('squad_sale_events', schema=None) as batch_op:
        batch_op.drop_index('ix_squad_sale_events_start_time')
        batch_op.drop_index(batch_op.f('ix_squad_sale_events_is_active'))
        batch_op.drop_index(batch_op.f('ix_squad_sale_events_guild_id'))
        batch_op.drop_index('ix_squad_sale_events_guild_active')
        batch_op.drop_index('ix_squad_sale_events_created_by')

    op.drop_table('squad_sale_events')
    # ### end Alembic commands ###